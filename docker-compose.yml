version: "3.8"
services:
  database:
    image: mysql:lts
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=$DATABASE_NAME
      - MYSQL_USER=$DATABASE_USER
      - MYSQL_PASSWORD=$DATABASE_PASSWORD
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - db:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  queue:
    image: rabbitmq:3.13.3-alpine
    restart: always
    ports:
      - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
    volumes:
      - queue_data:/var/lib/rabbitmq
      - queue_log:/var/log/rabbitmq

  web:
    container_name: sora_web
    image: rmecha/sora-baseline-web:main
    restart: always
    depends_on:
      database:
        condition: service_healthy
      queue:
        condition: service_healthy
    environment:
      DB_HOST: database
      DB_NAME: $DATABASE_NAME
      DB_USERNAME: $DATABASE_USER
      DB_PASSWORD: $DATABASE_PASSWORD
      AUTH_SECRET: $AUTH_SECRET
    ports:
      - 127.0.0.1:3000:3000
    volumes:
      - web_uploads:/app/apps/web/public/uploads

  processor:
    container_name: sora_vote_processor
    image: rmecha/sora-baseline-processor:main
    restart: always
    depends_on:
      web:
        condition: service_started
    environment:
      DB_HOST: database
      DB_NAME: $DATABASE_NAME
      DB_USERNAME: $DATABASE_USER
      DB_PASSWORD: $DATABASE_PASSWORD
      AUTH_SECRET: $AUTH_SECRET
      AMQP_URL: amqp://queue
      PROCESSOR_API_URL: http://web/api/trpc

  attendance:
    container_name: sora_vote_processor
    image: rmecha/sora-baseline-client-attendance:main
    restart: always
    depends_on:
      web:
        condition: service_started

  chooser:
    container_name: sora_vote_processor
    image: rmecha/sora-baseline-client-chooser:main
    restart: always
    depends_on:
      web:
        condition: service_started

volumes:
  db:
  web_uploads:
  queue_data:
  queue_log:
